<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hero Engineering Project Database</title>
  <!-- Bootstrap CSS from CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Your custom CSS -->
  <link rel="stylesheet" type="text/css" href="/styles/styles-custom.css" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <!-- Google Fonts -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap">
  <!-- Your custom script -->
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
</head>

<body class="index">
  <div id="background-video">
    <video id="video1" autoplay muted loop>
      <source src="mixkit-smoke-from-power-plant-4362-full-hd.mp4" type="video/mp4">
    </video>
    <video id="video2" autoplay muted loop>
      <source src="mining2.mp4" type="video/mp4">
    </video>
  </div>

  <div class="container-fluid py-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card shadow-lg rounded-3 border-0">
          <div class="card-header bg-primary text-white fs-4 fw-bold"><img src="images/yellow-logo.png" id="logoindex">
            PROJECT DATABASE</div>
          <div class="card-body">
            <!-- Form for Viewing Databases -->
            <form action="/deliverables" method="get">
              <div class="mb-3">
                <label for="projdb" class="form-label fs-5">Select Project Database</label>
                <select name="projdb" id="projdb" class="form-select form-select-lg" required>
                  <option value="" class="text-muted">Select Project Database</option>
                  <% Object.entries(dbList).forEach(([key, value])=> { %>
                    <option value="<%= key %>" class="fs-6">
                      <%= value %>
                    </option>
                    <% }); %>
                </select>
              </div>
              <button type="submit" class="btn btn-primary btn-lg px-4">View Database</button>
            </form>

            <hr class="my-4 border-light">

            <!-- Form for Creating Databases -->
            <div class="mb-3">
              <label for="newproj" class="form-label fs-5">New Project Database</label>
              <select name="newproj" id="newproj" class="form-select form-select-lg" required>
                <option value="" class="text-muted">New Project Database</option>
                <% Object.entries(allProjects).forEach(([key, value])=> { %>
                  <option value="<%= key %>" class="fs-6">
                    <%= value %>
                  </option>
                  <% }); %>
              </select>
            </div>
            <button type="submit" id="openCreateDBModal" class="btn btn-success btn-lg px-4">Create Database</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="createDatabaseModal" tabindex="-1" aria-labelledby="createDatabaseModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content custom-modal">
        <div class="modal-header">
          <h5 class="modal-title" id="createDatabaseModalLabel">Create Database</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="container-cdb">
            <div class="row-cdb">
              <div class="col-md-12">
                <h6>Database Creation</h6>
                <table class="table table-striped">
                  <tbody>
                    <tr>
                      <th>Database Created...</th>
                      <td id="newDatabaseName"></td>
                    </tr>
                    <tr>
                      <th>Creating Tables...</th>
                      <td id="tablesCreated"></td>
                    </tr>
                    <tr>
                      <th>Creating Default Values...</th>
                      <td id="defvalue"></td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" id="openDB">Open Database</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Your custom script -->

  <script>
    $(document).ready(function () {
      // Array to hold the paths of the videos
      var videos = ['video1', 'video2'];
      var currentIndex = 0;
      var fadeDuration = 1500; // Fade duration in milliseconds
      var overlapDuration = 500; // Overlap duration in milliseconds
  
      function crossfade() {
        var currentVideo = $('#' + videos[currentIndex]);
        var nextIndex = (currentIndex + 1) % videos.length;
        var nextVideo = $('#' + videos[nextIndex]);
  
        // Start fading out current video
        currentVideo.animate({ opacity: 0 }, fadeDuration, function() {
          currentVideo.get(0).pause(); // Pause current video after fading out
          currentVideo.css('opacity', 1); // Reset opacity
        });
  
        // Start fading in next video with a delay for overlap
        nextVideo.css({ opacity: 0, display: 'block' }); // Show next video
        nextVideo.get(0).play(); // Play next video
        setTimeout(function() {
          nextVideo.animate({ opacity: 1 }, fadeDuration);
        }, overlapDuration);
  
        // Schedule next crossfade
        setTimeout(function() {
          currentIndex = nextIndex; // Update currentIndex
          crossfade(); // Start next crossfade
        }, currentVideo.get(0).duration - fadeDuration - overlapDuration);
      }
  
      // Start the crossfade loop
      crossfade();
  
      // Change video every (total duration - fade duration - overlap duration)
      setInterval(crossfade, 15000 - fadeDuration - overlapDuration);
      var createDataBaseModalOpen = document.getElementById('openCreateDBModal');
      createDataBaseModalOpen.addEventListener('click', openCreateDBModal);

      var projectDBOptions = $('#projdb').find('option');
      var newProjectDBOptions = $('#newproj').find('option');

      $('#createDatabaseModal').on('hidden.bs.modal', function () {
        console.log("Modal closed, refreshing dropdowns...");
        refreshDropdowns();
      });

      $('#createDatabaseModal').on('click', '#openDB', function () {

        // Get the selected project database
        var selectedDB = $('#newproj').val();
        // Redirect to the deliverables page with the selected project database
        window.location.href = '/deliverables?projdb=' + selectedDB;
      });

      function openCreateDBModal() {
        $('#createDatabaseModal').modal('show');
        var selectElement = document.getElementById('newproj');
        var newproj = selectElement.value;

        params = JSON.stringify({
          newproj: newproj
        });

        $.ajax({
          url: "/createDatabase",
          method: "POST",
          contentType: 'application/json',
          data: params,
          success: function (data) {
            document.getElementById('newDatabaseName').innerText = data.database + " Created";
            console.log(data.values);
            displayTablesandValuesSequentially(data.tables, data.values);
          },
          error: function (xhr, status, error) {
            console.error("Error creating the database:", error);
          }
        });
      }

      function displayDefaultValuesSequentially(values) {
        $('#defaultvalues').show();
        return new Promise(function (resolve, reject) {
          var index = 0;
          function displayNextValue() {
            if (index < values.length) {
              var value = values[index];
              $('#defvalue').append('<p>' + value + '</p>');
              index++;
              setTimeout(displayNextValue, 500); // 0.5-second delay
            } else {
              resolve(); // Resolve the promise when all values are displayed
            }
          }
          displayNextValue();
        }).then(function () {
          $('#openDB').show(); // Show the "Open Database" button after all values are displayed
        });
      }

      function displayTablesandValuesSequentially(tables, values) {
        return new Promise(function (resolve, reject) {
          var index = 0;
          function displayNextTable() {
            if (index < tables.length) {
              var table = tables[index];
              $('#tablesCreated').append('<p>' + table + '</p>'); // append table name
              index++;
              setTimeout(displayNextTable, 500); // 0.5-second delay
            } else {
              resolve(); // Resolve the promise when tables are completely displayed
            }
          }
          displayNextTable();
        }).then(function () {
          // After tables are completely displayed, execute the function to display default values
          displayDefaultValuesSequentially(values);
        });
      }

      function clearModal() {
        $('#newDatabaseName').empty(); // Clear database name
        $('#tablesCreated').empty(); // Clear tables created
        $('#defvalue').empty(); // Clear default values
        $('#openDB').hide(); // Hide "Open Database" button
        $('#defaultvalues').hide();
      }

      // Function to refresh dropdowns
      function refreshDropdowns() {
        // Clear existing options
        $('#projdb').empty();
        $('#newproj').empty();
        // Add placeholder option to projdb dropdown
        $('#projdb').append($('<option>', {
          value: '',
          text: 'Select Project Database',
          class: 'text-muted'
        }));

        // Add placeholder option to newproj dropdown
        $('#newproj').append($('<option>', {
          value: '',
          text: 'New Project Database',
          class: 'text-muted'
        }));

        clearModal();

        // Fetch fresh data from the server and populate the dropdowns
        $.ajax({
          url: "/updateIndexDropdowns", // Endpoint to fetch fresh dropdown data
          method: "GET",
          success: function (data) {
            
            // Populate projdb dropdown
            var projdbDropdown = $('#projdb');
            $.each(data.dbList, function(key,value){
              projdbDropdown.append($('<option>', {
                value: key,
                text: value
              }));
            });

            // Convert allProjects object to array of key-value pairs and sort it in descending order
            

            // Populate newproj dropdown
            var newprojDropdown = $('#newproj');
           $.each(data.allProjects, function(key,value) {
              newprojDropdown.append($('<option>', {
                value: key,
                text: value
              }));
            });
          },
          error: function (xhr, status, error) {
            console.error("Error fetching fresh dropdown data:", error);
          }
        });
      }
    });
  </script>
</body>

</html>